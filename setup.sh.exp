#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Tue Jan  3 23:02:10 2023
# Script later updated by hand
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 1  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./setup.sh
match_max 100000
expect -exact "Note! This command requires you to have administrator priviliges (sudo access)"
expect -exact "on your host."
expect -exact "Press return to continue"
send -- "\r"
expect -exact "In which directory do you want to install the target filesystem?(if this directory does not exist it will be created)"
expect "\[ * \]"
send -- "\r"
expect "This step will extract the target filesystem to *"
expect -exact "Press return to continue"
send -- "\r"
expect -exact "This step will update the EXEC_DIR variables in the Rules.make file"
expect -exact "Press return to continue"
send -- "\r"
expect -exact "This step will export your target filesystem for NFS access."
expect -exact "Press return to continue"
send -- "\r"
expect -exact "This step will create boot.script and update boot.scr acordingly"
expect -exact "Press return to continue"
send -- "\r"
expect -exact "This step will set up minicom (serial communication application) for"
expect -exact "SDK development"
send -- "\r"
expect -exact "Which serial port do you want to use with minicom?"
expect "\[ /dev/* \] "
send -- "\r"
expect -exact "This step will set up the u-boot variables for booting the EVM."
expect -exact "Select Linux kernel location:"
expect -exact "\[ 1 \] "
send -- "\r"
expect -exact "Select root file system location:"
expect -exact "\[ 1 \] "
send -- "\r"
expect -exact "To use the SDK, you need to have Linaro cross compiler toolchain installed"
expect -exact "Do you want to install it now Y/n"
expect -exact "\[ y \]"
send -- "\r"
expect -exact "In which directory do you want to fetch the cross compiler on the host?(if this directory does not exist it will be created)"
expect "\[ * \] "
send -- "\r"
expect -exact "This step will download ducati build tools"
expect -exact "Do you want to download all the ducati build tools? y/N"
expect -exact "\[ n \]"
send -- "n\r"
expect -exact "Do you want to fetch all the sources y/N"
expect -exact "\[ n \]"
send -- "n\r"
expect eof
